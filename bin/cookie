#!/usr/bin/env python

import subprocess
import os
import shutil
import cookie
import sys

class cookie_cmd(cookie.command):

	"""
	Cookie command line tool. The entry point to the cookie framework. Type "cookie help" for a
	summary of all commands.
	"""

	def __init__(self):
		cookie.command.__init__(self, 'help')

	def do_bootstrap(self, args):
		"""
		The bootstrap command is used to initialize or update the docker image that is used by the
		cookie environment. It can also be used to remove the existing environment for cleanup if
		needed.
		"""
		if len(args) > 1 or (len(args) == 1 and args[0] != 'update' and args[0] != 'remove'):
			cookie.logger.abort('Syntax: %s bootstrap [update|remove]' % self.name())
		else:
			try:
				action = args[0] if len(args) == 1 else 'update'
				if action == 'update':
					cookie.docker.update()
				elif action =='remove':
					cookie.docker.remove()
				else:
					cookie.logger.abort('Unknown subcommand "%s"' % a)
			except Exception, e:
					cookie.logger.abort(e)

	def do_shell(self, args):
		"""
		Log into the docker environment. This will provide the caller with a functionnal console
		within the cookie docker image with everything properly setup. This environment can be
		used to test the compilation of various elements or to work on the targets manually. Note
		any modification outside of the /opt/cookie done in the image will be erased once the user
		exit the environment.
		"""
		if len(args) != 0:
			cookie.logger.abort('Syntax: %s shell' % self.name())
		else:
			try:
				cookie.docker.console()
			except Exception, e:
				cookie.logger.abort(e)

	def do_profiles(self, args):
		"""
		List the existing profiles of the environment. For each of them display the targetted
		architecture.
		"""
		try:
			if len(args) != 0:
				cookie.logger.abort('Syntax: %s profiles' % self.name())
			else:
				cookie.logger.info('Profiles List:')
				for pname in cookie.profiles.list():
					profile = cookie.profiles.get(pname)
					cookie.logger.debug('%s (%s)' % (profile.name(), profile.arch()))
		except Exception, e:
			cookie.logger.abort('%s profiles failed: %s' (self.name(), e.message))

	def do_list(self, args):
		"""
		Retrieve the list of all target currently managed by cookie. The names in this list can be
		used when selecting the active target or when one want to remove and existing target.
		"""
		try:
			if len(args) != 0:
				cookie.logger.abort('syntax: %s list' % (self.name()))
			else:
				cookie.logger.info('list of existing targets:')
				selected = cookie.targets.current()
				for t in cookie.targets.list():
					cookie.logger.debug(t + (' (current)'  if selected == t else ''))
		except Exception, e:
			cookie.logger.abort('%s list failed: %s' % (self.name(), str(e)))

	def do_create(self, args):
		"""
		Create a new target for a given profile. The caller can optionaly provides a name for the
		target, otherwise it is defined as profile_name-current_date.
		"""
		try:
			if len(args) not in [1, 2]:
				cookie.logger.abort('syntax: %s create profile [target_name]' % (self.name()))
			elif os.getenv('COOKIE_ENV') == '1':
				cookie.logger.abort('you cannot create a create from the build environment')
			else:
				cookie.targets.create(args[0], args[1] if len(args) == 2 else None)
		except Exception, e:
			cookie.logger.abort('%s create failed: %s' % (self.name(), str(e)))

	def do_destroy(self, args):
		"""
		Remove an existing target. Upon removal, a new target will be choosen as the active one. If
		there are no target left, then no target is selected.
		"""
		try:
			if len(args) != 1:
				cookie.logger.abort('syntax: %s destroy target_name' % (self.name()))
			elif os.getenv('COOKIE_ENV') == '1':
				cookie.logger.abort('you cannot destroy a target from the build environment')
			else:
				cookie.targets.destroy(args[0])
		except Exception, e:
			cookie.logger.abort('%s destroy failed: %s' % (self.name(), str(e)))

	def do_select(self, args):
		"""
		Select a target as the current one. This target will then be used by other commands that
		works on the current target, like add, remove or merge packages. Note that calling select is
		only possible from the host environment.
		"""
		try:
			if len(args) != 1:
				cookie.logger.abort('syntax: %s select target_name' % (self.name()))
			elif os.getenv('COOKIE_ENV') == '1':
				cookie.logger.abort('you cannot select a target from the build environment')
			else:
				cookie.targets.select(args[0])
		except Exception, e:
			cookie.logger.abort('%s select failed: %s' % (self.name(), str(e)))

	def do_add(self, args):
		"""
		Add a package within the currently selected target of cookie. This takes a package selector
		as argument. It allow to add packages that are not necessarly part of the target profile.
		This command works both from the host system and from within the cookie shell but always
		operate within the build environment.
		"""
		try:
			if len(args) != 1:
				cookie.logger.abort('syntax: %s add selector' % (self.name()))
			elif os.getenv('COOKIE_ENV') != '1':
				cookie.docker.run('cookie add %s' % args[0])
			else:
				cookie.targets.get(cookie.targets.current()).add(args[0])
		except Exception, e:
			cookie.logger.abort('%s add failed: %s' % (self.name(), str(e)))

	def do_remove(self, args):
		"""
		Remove a package from the currently selected target. This take a package name as argument
		and will remove all the files in the targets that belong to this package. It can be used to
		remove profile packages, or custom packages that were added with the add command. This
		command works both from the host system and from within the cookie shell, but will always
		operate within the build environment.
		"""
		try:
			if len(args) != 1:
				cookie.logger.abort('syntax: %s remove package_name' % (self.name()))
			elif os.getenv('COOKIE_ENV') != '1':
				cookie.docker.run('cookie remove %s' % args[0])
			else:
				cookie.targets.get(cookie.targets.current()).remove(args[0])
		except Exception, e:
			cookie.logger.abort('%s remove failed: %s' % (self.name(), e.message))

	def do_packages(self, args):
		"""
		List all the packages that are currently installed in the current target along with their
		version. This command works both from the host system and from within the cookie shell but
		will always operate within the build environment
		"""
		try:
			if len(args) != 0:
				cookie.logger.abort('syntax: %s packages' % (self.name()))
			elif os.getenv('COOKIE_ENV') != '1':
				cookie.docker.run('cookie packages')
			else:
				cookie.logger.info('The following package are installed on %s' % cookie.targets.current())
				all = cookie.targets.get(cookie.targets.current()).packages()
				for p in all:
					cookie.logger.debug(p)
		except Exception, e:
			cookie.logger.abort('%s packages failed: %s' % (self.name(), e.message))

	def do_merge(self, args):
		"""
		Merge all packages of the current target as defined in its profile. This will add or update
		packages, and removes the one that are not defined in the profile. This command works both
		from the host system and from within the cookie shell, but will always operate within the
		build environment.
		"""
		try:
			if len(args) != 0:
				cookie.logger.abort('syntax: %s merge' % (self.name()))
			elif os.getenv('COOKIE_ENV') != '1':
				cookie.docker.run('cookie merge')
			else:
				cookie.targets.get(cookie.targets.current()).merge()
		except Exception, e:
			cookie.logger.abort('%s merge failed: %s' % (self.name(), str(e)))

	def do_search(self, args):
		"""
		Search for all packages that match the given selector and display the resulting list to the
		caller. A selector always contains a package name, and might contains an optional version.
		When no version is specified, the system will select the latest available one.
		"""
		try:
			if len(args) != 1:
				cookie.logger.abort('syntax: %s search <selector>' % self.name())
			else:
				cookie.logger.info('list of packages matching with "%s":' % args[0])
				for (n,v) in cookie.packages.candidates(args[0]):
					cookie.logger.debug('%s-%s' % (n, v))
		except Exception, e:
			cookie.logger.abort('%s search failed: %s' % (self.name(), str(e)))

	def do_build(self, args):
		"""
		Perform build operations on the current target. This take a package selector has a first
		argument that is used to determine which package to work on. In addition, the operation to
		perform is given as a second argument and is expected to be one of: clean, fetch, setup,
		compile, install, check, mkdev, merge, unmerge. This command can be used to manually test
		the different package compilation and installation phases.
		"""
		try:
			if len(args) != 2 or args[1] not in [ 'clean', 'fetch', 'setup', 'compile', 'install', 'check', 'mkarchive', 'merge', 'unmerge' ]:
				cookie.logger.abort('syntax: %s build selector clean|fetch|setup|compile|install|check|mkdeb|merge|unmerge' % self.name())
			else:
				pkg = cookie.packages.elect(args[0])
				pkg.attach(cookie.targets.current())
				if		args[1] == 'clean'		: pkg.clean()
				elif	args[1] == 'fetch'		: pkg.fetch()
				elif	args[1] == 'setup'		: pkg.setup()
				elif	args[1] == 'compile'	: pkg.compile()
				elif	args[1] == 'install'	: pkg.install()
				elif	args[1] == 'check'		: pkg.check()
				elif	args[1] == 'mkarchive'	: pkg.mkarchive()
				elif	args[1] == 'merge'		: pkg.merge()
				elif	args[1] == 'unmerge'	: pkg.unmerge()
		except Exception, e:
			cookie.logger.abort('%s build failed: %s' % (self.name(), str(e)))

	def do_depends(self, args):
		try:
			if len(args) != 1:
				cookie.logger.abort('syntax: %s depends <selector>' % self.name())
			else:
				def do_one(d, l):
					for k, v in d.items():
						cookie.logger.debug('%s%s' % (' ' * l, k))
						do_one(v, l + 4)
				pkg = cookie.packages.elect(args[0])
				cookie.logger.info('Dependencies for %s' % pkg.selector())
				do_one(pkg.depends_r(), 0)
		except Exception, e:
			cookie.logger.abort('%s depends failed: %s' % (self.name(), str(e)))

	#
	# Commands normally used within packages. As such, it is important that they exit with a proper
	# status code in order to be fully integrated with Makefile
	#

	def do_patch(self, args):
		"""
		Apply a patch to a source. All patches are expected to be located in the cookie patches
		directory. This function is intended to be called from the package file when a patch is
		needed. Note that the use of patches is discouraged and to be used sparsingly.
		"""
		try:
			if len(args) != 2:
				raise Exception('syntax: %s patch <work_dir> <patch_name>' % self.name())
			else:
				cmd = 'cd %s && patch -p1 < %s/%s' % (args[0], cookie.layout.patches(), args[1])
				cookie.shell().run(cmd)
				sys.exit(0)
		except Exception, e:
				sys.exit(1)

	def do_import(self, args):
		"""
		Import a file from the profile of the current target into the component buid directory. If
		the file does not exists, this fail with 1, other it succeed (0). This mechanism is to be
		used in package makefile using "cookie import filename dest || default_behavior".
		"""
		try:
			if len(args) not in [2]:
				raise Exception('syntax: %s import filename destname' % self.name())
			else:
				p = cookie.targets.get(cookie.targets.current()).profile()
				i = '%s/%s/%s' % (cookie.layout.profiles(), p, args[0])
				o = args[1]
				shutil.copy(i, o)
			sys.exit(0)
		except Exception, e:
			cookie.logger.error(str(e))
			sys.exit(1)

	def do_fetch(self, args):
		"""
		Fetch a plain archive from a remote server then store it in the cache of the cookie
		environment for further use.
		"""
		if len(args) not in [1, 2]:
			cookie.logger.abort('syntax: %s fetch archive_url [destname]' % self.name())
		else:
			try:
				cookie.distfiles.fetch(args[0], args[1] if len(args) == 2 else None)
			except Exception, e:
				cookie.logger.abort('%s fetch failed: %s' % (self.name(), str(e)))

	def do_extract(self, args):
		"""
		Extract an archive from the cookie cache to the given directory.
		"""
		if len(args) != 2:
			cookie.logger.abort('Syntax: %s extract archive_name destdir' % self.name())
		else:
			try:
				cookie.distfiles.extract(args[0], args[1])
			except Exception, e:
				cookie.logger.abort(e)

	def do_distfiles(self, args):
		"""
		Manage third party archives within the cookie environment. It allow to download and unpack
		them. This action work closely with the environment cache as to ensure optimum efficienty.
		"""
		try:
			if len(args) < 1 or args[0] not in [ 'path', 'fetch', 'archive', 'extract', 'list', 'remove', 'clear' ]:
				cookie.logger.abort('Syntax: %s distfiles path|fetch|archive|extract|list|remove|clear ...' % (self.name()))
			elif args[0] == 'path' and len(args) != 1:
				cookie.logger.abort('Syntax: %s distfiles path' % (self.name()))
			elif args[0] == 'fetch' and len(args) != 3:
				cookie.logger.abort('Syntax: %s distfiles fetch url dest' % (self.name()))
			elif args[0] == 'archive' and len(args) != 2:
				cookie.logger.abort('Syntax: %s distfiles archive name' % (self.name()))
			elif args[0] == 'extract' and len(args) != 3:
				cookie.logger.abort('Syntax: %s distfiles extract name dest' % (self.name()))
			elif args[0] == 'list' and len(args) != 1:
				cookie.logger.abort('Syntax: %s distfiles list' % (self.name()))
			elif args[0] == 'remove' and len(args) != 2:
				cookie.logger.abort('Syntax: %s distfiles remove name' % (self.name()))
			elif args[0] == 'clear' and len(args) != 1:
				cookie.logger.abort('Syntax: %s distfiles clear' % (self.name()))
			elif args[0] == 'path':
				cookie.logger.info('path to distfiles:')
				cookie.logger.debug(cookie.distfiles.path())
			elif args[0] == 'archive':
				cookie.logger.info('path to %s archive:' % args[1])
				cookie.logger.debug(cookie.distfiles.archive(args[1]))
			elif args[0] == 'list':
				cookie.logger.info('list of existing distfiles:')
				for t in cookie.distfiles.list():
					cookie.logger.debug(t)
			elif args[0] == 'remove':
				cookie.distfiles.remove(name)
			elif args[0] == 'clear':
				cookie.distfiles.clear()
			elif args[0] == 'fetch':
				cookie.distfiles.fetch(args[1], args[2])
			elif args[0] == 'extract':
				cookie.distfiles.extract(args[1], args[2])
		except Exception, e:
			cookie.logger.abort('%s git failed: %s' % (self.name(), e.message))

	def do_git(self, args):
		"""
		Manage git source within the cookie environment. It allow to clone, update and checkout
		repositories from any git server. This action work closely with the environment cache as to
		ensure optimum efficienty.
		"""
		try:
			if len(args) < 1 or args[0] not in [ 'clone', 'checkout', 'remove', 'list', 'clear', 'path' ]:
				cookie.logger.abort('Syntax: %s git clone|checkout|remove|list|clear|path ...' % (self.name()))
			elif args[0] == 'clone' and len(args) != 3:
				cookie.logger.abort('Syntax: %s git clone <url> <reponame>' % (self.name()))
			elif args[0] == 'checkout' and len(args) != 4:
				cookie.logger.abort('Syntax: %s git checkout <reponame> <revision> <destdir>' % (self.name()))
			elif args[0] == 'remove' and len(args) != 2:
				cookie.logger.abort('Syntax: %s git remove <reponame>' % (self.name()))
			elif args[0] == 'clear' and len(args) != 1:
				cookie.logger.abort('Syntax: %s git clear')
			elif args[0] == 'list' and len(args) != 1:
				cookie.logger.abort('Syntax: %s git list')
			elif args[0] == 'path' and len(args) != 1:
				cookie.logger.abort('Syntax: %s git path')
			elif args[0] == 'clone':
				cookie.gitsources.clone(args[1], args[2])
			elif args[0] == 'checkout':
				cookie.gitsources.checkout(args[1], args[2], args[3])
			elif args[0] == 'remove':
				cookie.gitsources.remove(args[1])
			elif args[0] == 'clear':
				cookie.gitsources.clear()
			elif args[0] == 'path':
				cookie.logger.info('path to git repositories:')
				cookie.logger.debug(cookie.gitsources.path())
			elif args[0] == 'list':
				cookie.logger.info('list of existing git repositories:')
				for t in cookie.gitsources.list():
					cookie.logger.debug(t)
		except Exception, e:
			cookie.logger.abort('%s git failed: %s' % (self.name(), e.message))

cmd = cookie_cmd()
cmd.run()
